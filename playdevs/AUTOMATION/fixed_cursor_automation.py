#!/usr/bin/env python3
"""
Fixed Cursor IDE Automation Script
Corrige o problema de abertura de chats vs. edi√ß√£o de arquivos
"""

import subprocess
import time
import json
import os
import signal
import threading
from typing import Dict, List, Optional
from dataclasses import dataclass
from pathlib import Path
import psutil

@dataclass
class ProcessInfo:
    """Informa√ß√µes sobre processo do Cursor"""
    pid: int
    name: str
    status: str
    memory_usage: float

class FixedCursorAutomation:
    """Automa√ß√£o corrigida do Cursor com foco em abertura de chats"""
    
    def __init__(self, config_path: str = None):
        self.config = self._load_config(config_path)
        self.cursor_process = None
        self.active_chats = {}
        self.monitoring = False
        self.monitor_thread = None
    
    def _load_config(self, config_path: str) -> dict:
        """Carrega configura√ß√£o"""
        default_config = {
            "cursor_app_name": "Cursor",
            "cursor_bundle_id": "com.todesktop.230313mzl4w4u92",
            "project_path": "/Users/lucianoterres/Documents/GitHub/concurso-ai-orchestrated",
            "wait_times": {
                "app_launch": 5.0,
                "chat_open": 3.0,  # Aumentado para garantir abertura
                "message_send": 1.0,
                "response_wait": 10.0,
                "ui_focus": 2.0    # Tempo para foco na UI
            },
            "automation_scripts": {
                "open_chat": "tell application \"Cursor\" to activate",
                "send_message": "tell application \"System Events\" to keystroke \"{message}\"",
                "press_enter": "tell application \"System Events\" to key code 36"
            }
        }
        
        if config_path and os.path.exists(config_path):
            with open(config_path, 'r') as f:
                user_config = json.load(f)
                default_config.update(user_config)
        
        return default_config
    
    def find_cursor_process(self) -> Optional[ProcessInfo]:
        """Encontra processo do Cursor"""
        for proc in psutil.process_iter(['pid', 'name', 'status', 'memory_info']):
            try:
                if self.config["cursor_app_name"].lower() in proc.info['name'].lower():
                    return ProcessInfo(
                        pid=proc.info['pid'],
                        name=proc.info['name'],
                        status=proc.info['status'],
                        memory_usage=proc.info['memory_info'].rss / 1024 / 1024  # MB
                    )
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        return None
    
    def launch_cursor(self) -> bool:
        """Lan√ßa o Cursor usando AppleScript (macOS)"""
        try:
            # Comando para abrir o Cursor
            script = f'''
            tell application "{self.config["cursor_app_name"]}"
                activate
                delay 2
            end tell
            '''
            
            subprocess.run(['osascript', '-e', script], check=True)
            time.sleep(self.config["wait_times"]["app_launch"])
            
            # Verifica se o processo foi criado
            self.cursor_process = self.find_cursor_process()
            if self.cursor_process:
                print(f"‚úÖ Cursor lan√ßado (PID: {self.cursor_process.pid})")
                return True
            else:
                print("‚ùå Cursor n√£o foi encontrado ap√≥s lan√ßamento")
                return False
                
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao lan√ßar Cursor: {e}")
            return False
    
    def execute_applescript(self, script: str) -> bool:
        """Executa script AppleScript"""
        try:
            result = subprocess.run(['osascript', '-e', script], 
                                  capture_output=True, text=True, check=True)
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro no AppleScript: {e}")
            return False
    
    def ensure_cursor_focus(self) -> bool:
        """Garante que o Cursor est√° em foco"""
        try:
            # Ativa o Cursor e aguarda
            script = f'''
            tell application "{self.config["cursor_app_name"]}"
                activate
                delay 1
            end tell
            '''
            
            if self.execute_applescript(script):
                time.sleep(self.config["wait_times"]["ui_focus"])
                return True
            return False
        except Exception as e:
            print(f"‚ùå Erro ao focar Cursor: {e}")
            return False
    
    def open_new_chat(self, chat_name: str) -> bool:
        """Abre novo chat usando AppleScript - VERS√ÉO CORRIGIDA"""
        try:
            print(f"üöÄ Abrindo chat '{chat_name}'...")
            
            # 1. Garante que o Cursor est√° em foco
            if not self.ensure_cursor_focus():
                print("‚ùå Falha ao focar Cursor")
                return False
            
            # 2. Abre novo chat usando Cmd+L (nova aba de chat no Cursor)
            # CORRE√á√ÉO: Usar Cmd+L que √© o atalho correto para nova aba de chat no Cursor
            script = '''
            tell application "System Events"
                keystroke "l" using command down
                delay 1
            end tell
            '''
            
            if self.execute_applescript(script):
                time.sleep(self.config["wait_times"]["chat_open"])
                
                # 3. Verifica se o chat foi aberto (opcional - pode ser implementado)
                # Por enquanto, assume que foi aberto com sucesso
                
                # 4. Salva refer√™ncia do chat
                self.active_chats[chat_name] = {
                    "opened_at": time.time(),
                    "status": "active",
                    "pid": self.cursor_process.pid if self.cursor_process else None
                }
                
                print(f"‚úÖ Chat '{chat_name}' aberto com sucesso")
                return True
            else:
                print(f"‚ùå Falha ao executar script de abertura de chat")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao abrir chat '{chat_name}': {e}")
            return False
    
    def send_prompt(self, prompt: str, chat_name: str = None) -> bool:
        """Envia prompt usando AppleScript - VERS√ÉO CORRIGIDA"""
        try:
            print(f"üì§ Enviando prompt para '{chat_name or 'chat ativo'}'...")
            
            # 1. Garante que o Cursor est√° em foco
            if not self.ensure_cursor_focus():
                print("‚ùå Falha ao focar Cursor")
                return False
            
            # 2. Limpa o campo de texto
            script = '''
            tell application "System Events"
                key code 0 using command down  -- Cmd+A (selecionar tudo)
                key code 51                    -- Delete
                delay 0.5
            end tell
            '''
            self.execute_applescript(script)
            time.sleep(0.5)
            
            # 3. Digita o prompt
            # Escapa caracteres especiais para AppleScript
            escaped_prompt = prompt.replace('"', '\\"').replace('\n', '\\n')
            
            script = f'''
            tell application "System Events"
                keystroke "{escaped_prompt}"
                delay 1
            end tell
            '''
            
            if self.execute_applescript(script):
                time.sleep(1)
                
                # 4. Envia a mensagem (Cmd+Enter)
                send_script = '''
                tell application "System Events"
                    key code 36 using command down
                    delay 0.5
                end tell
                '''
                
                if self.execute_applescript(send_script):
                    time.sleep(self.config["wait_times"]["message_send"])
                    print(f"‚úÖ Prompt enviado para '{chat_name or 'chat ativo'}'")
                    return True
            
            print(f"‚ùå Falha ao enviar prompt")
            return False
            
        except Exception as e:
            print(f"‚ùå Erro ao enviar prompt: {e}")
            return False
    
    def monitor_cursor_status(self):
        """Monitora status do Cursor em thread separada"""
        while self.monitoring:
            try:
                if self.cursor_process:
                    # Verifica se o processo ainda existe
                    if not psutil.pid_exists(self.cursor_process.pid):
                        print("‚ö†Ô∏è Processo do Cursor foi encerrado")
                        self.cursor_process = None
                        break
                    
                    # Atualiza informa√ß√µes do processo
                    try:
                        proc = psutil.Process(self.cursor_process.pid)
                        self.cursor_process.memory_usage = proc.memory_info().rss / 1024 / 1024
                        self.cursor_process.status = proc.status()
                    except psutil.NoSuchProcess:
                        self.cursor_process = None
                        break
                
                time.sleep(5)  # Verifica a cada 5 segundos
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erro no monitoramento: {e}")
                time.sleep(5)
    
    def start_monitoring(self):
        """Inicia monitoramento do Cursor"""
        if not self.monitoring:
            self.monitoring = True
            self.monitor_thread = threading.Thread(target=self.monitor_cursor_status)
            self.monitor_thread.daemon = True
            self.monitor_thread.start()
            print("üîç Monitoramento iniciado")
    
    def stop_monitoring(self):
        """Para monitoramento do Cursor"""
        if self.monitoring:
            self.monitoring = False
            if self.monitor_thread:
                self.monitor_thread.join(timeout=2)
            print("‚èπÔ∏è Monitoramento parado")
    
    def execute_agent_workflow(self, chat_config: dict) -> bool:
        """Executa workflow para um agente - VERS√ÉO CORRIGIDA"""
        print(f"\nüöÄ Executando {chat_config['agent_type']} ‚Äì {chat_config['story_id']}")
        
        # 1. Abre novo chat
        if not self.open_new_chat(chat_config['name']):
            print(f"‚ùå Falha ao abrir chat para {chat_config['agent_type']}")
            return False
        
        # 2. Envia prompt
        if not self.send_prompt(chat_config['prompt'], chat_config['name']):
            print(f"‚ùå Falha ao enviar prompt para {chat_config['agent_type']}")
            return False
        
        # 3. Aguarda resposta
        print(f"‚è≥ Aguardando resposta de {chat_config['agent_type']}...")
        print("üí° Complete sua tarefa no chat e pressione Ctrl+C para continuar")
        
        try:
            time.sleep(self.config["wait_times"]["response_wait"])
        except KeyboardInterrupt:
            print(f"‚è≠Ô∏è Continuando para pr√≥ximo agente...")
        
        # 4. Atualiza status
        self.active_chats[chat_config['name']]["status"] = "completed"
        
        print(f"‚úÖ {chat_config['agent_type']} conclu√≠do")
        return True
    
    def execute_sprint(self, sprint_number: int) -> bool:
        """Executa sprint completa - VERS√ÉO CORRIGIDA"""
        print(f"\nüéØ Executando Sprint {sprint_number}")
        
        # Carrega configura√ß√£o da sprint
        sprint_config = self._load_sprint_config(sprint_number)
        if not sprint_config:
            return False
        
        # Inicia monitoramento
        self.start_monitoring()
        
        try:
            # Executa cada agente
            total_agents = len(sprint_config["chats"])
            for i, chat_config in enumerate(sprint_config["chats"], 1):
                print(f"\nüìä Progresso: {i}/{total_agents}")
                print("‚îÄ" * 50)
                
                if not self.execute_agent_workflow(chat_config):
                    print(f"‚ùå Falha em {chat_config['agent_type']}")
                    return False
            
            print(f"‚úÖ Sprint {sprint_number} executada com sucesso")
            return True
            
        finally:
            self.stop_monitoring()
    
    def _load_sprint_config(self, sprint_number: int) -> Optional[dict]:
        """Carrega configura√ß√£o da sprint"""
        config_file = f"sprint_{sprint_number}_config.json"
        config_path = Path(self.config["project_path"]) / "playdevs" / "AUTOMATION" / config_file
        
        if not config_path.exists():
            print(f"‚ùå Configura√ß√£o n√£o encontrada: {config_path}")
            return None
        
        try:
            with open(config_path, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå Erro ao carregar configura√ß√£o: {e}")
            return None
    
    def get_cursor_info(self) -> dict:
        """Retorna informa√ß√µes do Cursor"""
        if self.cursor_process:
            return {
                "pid": self.cursor_process.pid,
                "name": self.cursor_process.name,
                "status": self.cursor_process.status,
                "memory_mb": round(self.cursor_process.memory_usage, 2)
            }
        return {"status": "not_running"}
    
    def cleanup(self):
        """Limpa recursos"""
        print("\nüßπ Limpando recursos...")
        self.stop_monitoring()
        self.active_chats.clear()
        print("‚úÖ Limpeza conclu√≠da")

def main():
    """Fun√ß√£o principal - VERS√ÉO CORRIGIDA"""
    automation = FixedCursorAutomation()
    
    try:
        print("ü§ñ Automa√ß√£o Corrigida do Cursor")
        print("=" * 50)
        
        # Verifica se o Cursor est√° rodando
        cursor_info = automation.get_cursor_info()
        if cursor_info["status"] == "not_running":
            print("üöÄ Lan√ßando Cursor...")
            if not automation.launch_cursor():
                return
        else:
            print(f"‚úÖ Cursor j√° est√° rodando (PID: {cursor_info['pid']})")
            automation.cursor_process = automation.find_cursor_process()
        
        # Menu de op√ß√µes
        while True:
            print("\nüìã Op√ß√µes:")
            print("1. Executar Sprint 2 (Corrigida)")
            print("2. Executar Sprint 3")
            print("3. Executar Sprint 4")
            print("4. Teste manual de abertura de chat")
            print("5. Status do Cursor")
            print("6. Sair")
            
            try:
                choice = input("\nEscolha uma op√ß√£o: ").strip()
                
                if choice == "1":
                    print("üöÄ Iniciando Sprint 2 (vers√£o corrigida)...")
                    automation.execute_sprint(2)
                    print("‚úÖ Sprint 2 conclu√≠da. Retornando ao menu...")
                elif choice == "2":
                    print("üöÄ Iniciando Sprint 3...")
                    automation.execute_sprint(3)
                    print("‚úÖ Sprint 3 conclu√≠da. Retornando ao menu...")
                elif choice == "3":
                    print("üöÄ Iniciando Sprint 4...")
                    automation.execute_sprint(4)
                    print("‚úÖ Sprint 4 conclu√≠da. Retornando ao menu...")
                elif choice == "4":
                    # Teste manual
                    print("üß™ Executando teste manual de abertura de chat...")
                    automation.open_new_chat("Teste-Chat")
                    automation.send_prompt("Este √© um teste de automa√ß√£o corrigida!")
                    print("‚úÖ Teste conclu√≠do. Retornando ao menu...")
                elif choice == "5":
                    info = automation.get_cursor_info()
                    print(f"üìä Status do Cursor: {info}")
                elif choice == "6":
                    print("üëã Encerrando automa√ß√£o...")
                    break
                else:
                    print("‚ùå Op√ß√£o inv√°lida")
                    
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è Opera√ß√£o interrompida pelo usu√°rio")
                continue
            except Exception as e:
                print(f"‚ùå Erro na opera√ß√£o: {e}")
                continue
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
    finally:
        automation.cleanup()

if __name__ == "__main__":
    main()
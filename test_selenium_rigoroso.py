#!/usr/bin/env python3
"""
Teste Rigoroso com Selenium - An√°lise de Editais
Testa toda a funcionalidade de an√°lise de editais integrada ao dashboard
"""

import time
import json
import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager
import pytest

class TesteAnaliseEditais:
    def __init__(self):
        self.driver = None
        self.frontend_url = "http://localhost:3001"  # Frontend na porta 3001
        self.backend_url = "http://localhost:8002"   # Backend na porta 8002
        self.wait_timeout = 10
        
    def setup_driver(self):
        """Configura o driver do Chrome"""
        print("üîß Configurando driver do Chrome...")
        
        chrome_options = Options()
        chrome_options.add_argument("--headless")  # Executar sem interface gr√°fica
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        self.driver.implicitly_wait(5)
        
        print("‚úÖ Driver configurado com sucesso!")
        
    def teardown_driver(self):
        """Fecha o driver"""
        if self.driver:
            self.driver.quit()
            print("üîí Driver fechado")
    
    def test_backend_health(self):
        """Testa se o backend est√° funcionando"""
        print("\nüß™ Testando sa√∫de do backend...")
        
        try:
            response = requests.get(f"{self.backend_url}/health", timeout=5)
            assert response.status_code == 200
            
            data = response.json()
            assert data["status"] == "healthy"
            assert data["service"] == "edital-analyzer"
            assert data["ai_available"] == True
            
            print("‚úÖ Backend est√° saud√°vel!")
            return True
            
        except Exception as e:
            print(f"‚ùå Backend n√£o est√° funcionando: {e}")
            return False
    
    def test_frontend_access(self):
        """Testa se o frontend est√° acess√≠vel"""
        print("\nüß™ Testando acesso ao frontend...")
        
        try:
            self.driver.get(self.frontend_url)
            WebDriverWait(self.driver, self.wait_timeout).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            title = self.driver.title
            print(f"‚úÖ Frontend acess√≠vel! T√≠tulo: {title}")
            return True
            
        except TimeoutException:
            print("‚ùå Frontend n√£o est√° respondendo")
            return False
        except Exception as e:
            print(f"‚ùå Erro ao acessar frontend: {e}")
            return False
    
    def test_dashboard_access(self):
        """Testa acesso ao dashboard"""
        print("\nüß™ Testando acesso ao dashboard...")
        
        try:
            self.driver.get(f"{self.frontend_url}/dashboard")
            
            # Aguardar carregamento
            WebDriverWait(self.driver, self.wait_timeout).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            # Verificar se h√° elementos do dashboard
            dashboard_elements = [
                "Dashboard",
                "Novo Simulado",
                "An√°lise de Editais",
                "Ver Resultados"
            ]
            
            for element_text in dashboard_elements:
                try:
                    element = self.driver.find_element(By.XPATH, f"//*[contains(text(), '{element_text}')]")
                    print(f"‚úÖ Elemento encontrado: {element_text}")
                except NoSuchElementException:
                    print(f"‚ö†Ô∏è Elemento n√£o encontrado: {element_text}")
            
            print("‚úÖ Dashboard acess√≠vel!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao acessar dashboard: {e}")
            return False
    
    def test_analise_editais_page(self):
        """Testa a p√°gina de an√°lise de editais"""
        print("\nüß™ Testando p√°gina de an√°lise de editais...")
        
        try:
            # Acessar p√°gina diretamente
            self.driver.get(f"{self.frontend_url}/analise-editais")
            
            # Aguardar carregamento
            WebDriverWait(self.driver, self.wait_timeout).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            # Verificar elementos da p√°gina
            page_elements = [
                "An√°lise de Editais com IA",
                "Sistema inteligente de an√°lise",
                "Carregar Exemplo",
                "Limpar",
                "Analisar Edital"
            ]
            
            for element_text in page_elements:
                try:
                    element = self.driver.find_element(By.XPATH, f"//*[contains(text(), '{element_text}')]")
                    print(f"‚úÖ Elemento encontrado: {element_text}")
                except NoSuchElementException:
                    print(f"‚ö†Ô∏è Elemento n√£o encontrado: {element_text}")
            
            print("‚úÖ P√°gina de an√°lise de editais acess√≠vel!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao acessar p√°gina de an√°lise: {e}")
            return False
    
    def test_carregar_exemplo(self):
        """Testa o bot√£o de carregar exemplo"""
        print("\nüß™ Testando carregamento de exemplo...")
        
        try:
            # Acessar p√°gina
            self.driver.get(f"{self.frontend_url}/analise-editais")
            
            # Aguardar carregamento
            WebDriverWait(self.driver, self.wait_timeout).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            # Encontrar e clicar no bot√£o "Carregar Exemplo"
            try:
                carregar_btn = WebDriverWait(self.driver, 5).until(
                    EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Carregar Exemplo')]"))
                )
                carregar_btn.click()
                print("‚úÖ Bot√£o 'Carregar Exemplo' clicado!")
                
                # Aguardar um pouco para o carregamento
                time.sleep(2)
                
                # Verificar se o textarea foi preenchido
                textarea = self.driver.find_element(By.TAG_NAME, "textarea")
                conteudo = textarea.get_attribute("value")
                
                if conteudo and len(conteudo) > 100:
                    print("‚úÖ Exemplo carregado com sucesso!")
                    print(f"   Tamanho do conte√∫do: {len(conteudo)} caracteres")
                    return True
                else:
                    print("‚ùå Exemplo n√£o foi carregado corretamente")
                    return False
                    
            except TimeoutException:
                print("‚ùå Bot√£o 'Carregar Exemplo' n√£o encontrado")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao testar carregamento de exemplo: {e}")
            return False
    
    def test_analise_edital(self):
        """Testa a an√°lise de edital"""
        print("\nüß™ Testando an√°lise de edital...")
        
        try:
            # Acessar p√°gina
            self.driver.get(f"{self.frontend_url}/analise-editais")
            
            # Aguardar carregamento
            WebDriverWait(self.driver, self.wait_timeout).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            # Carregar exemplo primeiro
            try:
                carregar_btn = WebDriverWait(self.driver, 5).until(
                    EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Carregar Exemplo')]"))
                )
                carregar_btn.click()
                time.sleep(2)
            except:
                print("‚ö†Ô∏è N√£o foi poss√≠vel carregar exemplo, continuando...")
            
            # Encontrar e clicar no bot√£o "Analisar Edital"
            try:
                analisar_btn = WebDriverWait(self.driver, 5).until(
                    EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Analisar Edital')]"))
                )
                analisar_btn.click()
                print("‚úÖ Bot√£o 'Analisar Edital' clicado!")
                
                # Aguardar an√°lise (pode demorar)
                print("‚è≥ Aguardando an√°lise...")
                time.sleep(10)  # Aguardar 10 segundos para an√°lise
                
                # Verificar se apareceram resultados
                try:
                    resultados = WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'Resultados da An√°lise')]"))
                    )
                    print("‚úÖ Resultados da an√°lise apareceram!")
                    
                    # Verificar elementos dos resultados
                    result_elements = [
                        "Informa√ß√µes B√°sicas",
                        "Estat√≠sticas",
                        "Resumo Executivo"
                    ]
                    
                    for element_text in result_elements:
                        try:
                            element = self.driver.find_element(By.XPATH, f"//*[contains(text(), '{element_text}')]")
                            print(f"‚úÖ Resultado encontrado: {element_text}")
                        except NoSuchElementException:
                            print(f"‚ö†Ô∏è Resultado n√£o encontrado: {element_text}")
                    
                    return True
                    
                except TimeoutException:
                    print("‚ùå Resultados n√£o apareceram ap√≥s an√°lise")
                    return False
                    
            except TimeoutException:
                print("‚ùå Bot√£o 'Analisar Edital' n√£o encontrado")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao testar an√°lise de edital: {e}")
            return False
    
    def test_navegacao_dashboard(self):
        """Testa navega√ß√£o do dashboard para an√°lise de editais"""
        print("\nüß™ Testando navega√ß√£o do dashboard...")
        
        try:
            # Acessar dashboard
            self.driver.get(f"{self.frontend_url}/dashboard")
            
            # Aguardar carregamento
            WebDriverWait(self.driver, self.wait_timeout).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            # Tentar encontrar e clicar no bot√£o de an√°lise de editais
            try:
                # Procurar por link ou bot√£o com texto "An√°lise de Editais"
                analise_link = WebDriverWait(self.driver, 5).until(
                    EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), 'An√°lise de Editais')]"))
                )
                analise_link.click()
                print("‚úÖ Link 'An√°lise de Editais' clicado!")
                
                # Aguardar navega√ß√£o
                time.sleep(3)
                
                # Verificar se chegou na p√°gina correta
                current_url = self.driver.current_url
                if "analise-editais" in current_url:
                    print("‚úÖ Navega√ß√£o para an√°lise de editais bem-sucedida!")
                    return True
                else:
                    print(f"‚ùå Navega√ß√£o falhou. URL atual: {current_url}")
                    return False
                    
            except TimeoutException:
                print("‚ùå Link 'An√°lise de Editais' n√£o encontrado no dashboard")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao testar navega√ß√£o: {e}")
            return False
    
    def test_api_direct(self):
        """Testa a API diretamente"""
        print("\nüß™ Testando API diretamente...")
        
        try:
            # Teste 1: Health check
            response = requests.get(f"{self.backend_url}/health", timeout=5)
            assert response.status_code == 200
            print("‚úÖ Health check OK")
            
            # Teste 2: An√°lise de exemplo
            response = requests.get(f"{self.backend_url}/analyze/sample", timeout=10)
            assert response.status_code == 200
            
            data = response.json()
            assert data["status"] == "success"
            assert "resultado" in data
            assert "tempo_processamento" in data
            
            print("‚úÖ An√°lise de exemplo OK")
            print(f"   Tempo: {data['tempo_processamento']:.2f}s")
            
            # Teste 3: An√°lise personalizada
            edital_teste = """
            EDITAL N¬∫ 1 ‚Äì CONCURSO P√öBLICO PARA ANALISTA JUDICI√ÅRIO
            O TRIBUNAL REGIONAL DO TRABALHO torna p√∫blica a realiza√ß√£o de concurso p√∫blico para o provimento de 100 vagas no cargo de Analista Judici√°rio.
            1.1 O concurso ser√° executado pela FCC.
            1.2 Exige n√≠vel superior.
            1.3 Remunera√ß√£o inicial de R$ 8.500,00.
            2.1 Inscri√ß√µes de 15/02/2024 a 15/03/2024.
            2.2 Taxa de R$ 120,00.
            3.1 Prova Objetiva em 15/04/2024.
            4.1 Disciplinas: Portugu√™s, Direito do Trabalho, Direito Constitucional, Inform√°tica.
            """
            
            payload = {
                "conteudo": edital_teste,
                "url_edital": "https://exemplo.com/edital-trt",
                "banca": "FCC"
            }
            
            response = requests.post(f"{self.backend_url}/analyze", json=payload, timeout=10)
            assert response.status_code == 200
            
            data = response.json()
            assert data["status"] == "success"
            assert "resultado" in data
            
            print("‚úÖ An√°lise personalizada OK")
            print(f"   Tempo: {data['tempo_processamento']:.2f}s")
            
            # Verificar dados extra√≠dos
            resultado = data["resultado"]
            analise_basica = resultado.get("analise_basica", {})
            info = resultado.get("informacoes_extraidas", {})
            
            print(f"   Tipo: {analise_basica.get('tipo_documento', 'N/A')}")
            print(f"   Banca: {analise_basica.get('banca_organizadora', 'N/A')}")
            print(f"   Disciplinas: {len(info.get('disciplinas', []))}")
            print(f"   Datas: {len(info.get('datas', []))}")
            print(f"   Valores: {len(info.get('valores', []))}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao testar API: {e}")
            return False
    
    def run_all_tests(self):
        """Executa todos os testes"""
        print("üöÄ INICIANDO TESTE RIGOROSO COM SELENIUM")
        print("=" * 60)
        
        results = {}
        
        try:
            # Configurar driver
            self.setup_driver()
            
            # Executar testes
            tests = [
                ("Backend Health", self.test_backend_health),
                ("Frontend Access", self.test_frontend_access),
                ("Dashboard Access", self.test_dashboard_access),
                ("Analise Editais Page", self.test_analise_editais_page),
                ("Carregar Exemplo", self.test_carregar_exemplo),
                ("Analise Edital", self.test_analise_edital),
                ("Navegacao Dashboard", self.test_navegacao_dashboard),
                ("API Direct", self.test_api_direct)
            ]
            
            for test_name, test_func in tests:
                print(f"\n{'='*20} {test_name} {'='*20}")
                try:
                    result = test_func()
                    results[test_name] = result
                    if result:
                        print(f"‚úÖ {test_name}: PASSOU")
                    else:
                        print(f"‚ùå {test_name}: FALHOU")
                except Exception as e:
                    print(f"üí• {test_name}: ERRO - {e}")
                    results[test_name] = False
            
        finally:
            self.teardown_driver()
        
        # Relat√≥rio final
        print("\n" + "="*60)
        print("üìä RELAT√ìRIO FINAL DOS TESTES")
        print("="*60)
        
        passed = sum(1 for result in results.values() if result)
        total = len(results)
        
        for test_name, result in results.items():
            status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
            print(f"{test_name}: {status}")
        
        print(f"\nüéØ RESULTADO GERAL: {passed}/{total} testes passaram")
        
        if passed == total:
            print("üéâ TODOS OS TESTES PASSARAM! Sistema funcionando perfeitamente!")
        elif passed >= total * 0.8:
            print("‚ö†Ô∏è Maioria dos testes passou. Alguns problemas menores encontrados.")
        else:
            print("‚ùå Muitos testes falharam. Sistema precisa de corre√ß√µes.")
        
        return results

def main():
    """Fun√ß√£o principal"""
    tester = TesteAnaliseEditais()
    results = tester.run_all_tests()
    
    # Salvar resultados em arquivo
    with open("test_results.json", "w") as f:
        json.dump(results, f, indent=2)
    
    print(f"\nüìÑ Resultados salvos em: test_results.json")

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
Teste Rigoroso de UX - Concurso AI
Testa todos os aspectos da experi√™ncia do usu√°rio usando Selenium
"""

import time
import json
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException

class UXTestSuite:
    def __init__(self, base_url="https://concurso-ai-orchestrated.vercel.app/"):
        self.base_url = base_url
        self.driver = None
        self.results = {
            'timestamp': datetime.now().isoformat(),
            'url': base_url,
            'tests': [],
            'summary': {
                'total_tests': 0,
                'passed': 0,
                'failed': 0,
                'warnings': 0
            }
        }
        
    def setup_driver(self):
        """Configura o driver do Selenium"""
        print("üîß Configurando driver do Selenium...")
        
        chrome_options = Options()
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36")
        
        # Para modo headless (opcional)
        # chrome_options.add_argument("--headless")
        
        try:
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.implicitly_wait(10)
            print("‚úÖ Driver configurado com sucesso")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao configurar driver: {e}")
            return False
    
    def log_test(self, test_name, status, message="", details=None):
        """Registra resultado de um teste"""
        test_result = {
            'name': test_name,
            'status': status,  # 'PASS', 'FAIL', 'WARN'
            'message': message,
            'details': details or {},
            'timestamp': datetime.now().isoformat()
        }
        
        self.results['tests'].append(test_result)
        self.results['summary']['total_tests'] += 1
        
        if status == 'PASS':
            self.results['summary']['passed'] += 1
            print(f"‚úÖ {test_name}: {message}")
        elif status == 'FAIL':
            self.results['summary']['failed'] += 1
            print(f"‚ùå {test_name}: {message}")
        else:  # WARN
            self.results['summary']['warnings'] += 1
            print(f"‚ö†Ô∏è {test_name}: {message}")
    
    def test_page_load(self):
        """Testa carregamento da p√°gina inicial"""
        print("\nüåê Testando carregamento da p√°gina...")
        
        try:
            self.driver.get(self.base_url)
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            # Verificar t√≠tulo
            title = self.driver.title
            if "Concurso AI" in title:
                self.log_test("Page Load", "PASS", f"P√°gina carregada com t√≠tulo: {title}")
            else:
                self.log_test("Page Load", "WARN", f"T√≠tulo inesperado: {title}")
            
            # Verificar elementos principais
            main_elements = [
                ("h1", "T√≠tulo principal"),
                ("nav", "Navega√ß√£o"),
                ("button", "Bot√µes")
            ]
            
            for selector, description in main_elements:
                try:
                    element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if element.is_displayed():
                        self.log_test(f"Element Check - {description}", "PASS", f"Elemento {selector} encontrado e vis√≠vel")
                    else:
                        self.log_test(f"Element Check - {description}", "WARN", f"Elemento {selector} encontrado mas n√£o vis√≠vel")
                except NoSuchElementException:
                    self.log_test(f"Element Check - {description}", "FAIL", f"Elemento {selector} n√£o encontrado")
            
        except TimeoutException:
            self.log_test("Page Load", "FAIL", "Timeout ao carregar p√°gina")
        except Exception as e:
            self.log_test("Page Load", "FAIL", f"Erro inesperado: {str(e)}")
    
    def test_navigation(self):
        """Testa navega√ß√£o entre p√°ginas"""
        print("\nüß≠ Testando navega√ß√£o...")
        
        try:
            # Testar link de login
            login_link = self.driver.find_element(By.LINK_TEXT, "Entrar")
            if login_link.is_displayed() and login_link.is_enabled():
                self.log_test("Login Link", "PASS", "Link de login encontrado e clic√°vel")
                
                # Clicar no link de login
                login_link.click()
                time.sleep(2)
                
                # Verificar se foi redirecionado para p√°gina de login
                current_url = self.driver.current_url
                if "login" in current_url:
                    self.log_test("Login Navigation", "PASS", f"Redirecionamento para login bem-sucedido: {current_url}")
                else:
                    self.log_test("Login Navigation", "FAIL", f"Redirecionamento falhou. URL atual: {current_url}")
            else:
                self.log_test("Login Link", "FAIL", "Link de login n√£o encontrado ou n√£o clic√°vel")
                
        except NoSuchElementException:
            self.log_test("Login Link", "FAIL", "Link de login n√£o encontrado")
        except Exception as e:
            self.log_test("Navigation", "FAIL", f"Erro na navega√ß√£o: {str(e)}")
    
    def test_login_form(self):
        """Testa formul√°rio de login"""
        print("\nüîê Testando formul√°rio de login...")
        
        try:
            # Verificar se estamos na p√°gina de login
            if "login" not in self.driver.current_url:
                self.driver.get(f"{self.base_url}login")
                time.sleep(2)
            
            # Verificar elementos do formul√°rio
            form_elements = [
                ("input[type='email']", "Campo de email"),
                ("input[type='password']", "Campo de senha"),
                ("button[type='submit']", "Bot√£o de submit")
            ]
            
            for selector, description in form_elements:
                try:
                    element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if element.is_displayed() and element.is_enabled():
                        self.log_test(f"Form Element - {description}", "PASS", f"Elemento {selector} encontrado e funcional")
                    else:
                        self.log_test(f"Form Element - {description}", "WARN", f"Elemento {selector} encontrado mas n√£o funcional")
                except NoSuchElementException:
                    self.log_test(f"Form Element - {description}", "FAIL", f"Elemento {selector} n√£o encontrado")
            
            # Testar preenchimento do formul√°rio
            email_field = self.driver.find_element(By.CSS_SELECTOR, "input[type='email']")
            password_field = self.driver.find_element(By.CSS_SELECTOR, "input[type='password']")
            
            # Limpar campos e preencher
            email_field.clear()
            email_field.send_keys("admin@concursoai.com")
            
            password_field.clear()
            password_field.send_keys("admin123")
            
            self.log_test("Form Fill", "PASS", "Formul√°rio preenchido com sucesso")
            
            # Testar submiss√£o
            submit_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            submit_button.click()
            
            # Aguardar redirecionamento ou feedback
            time.sleep(3)
            
            # Verificar se login foi bem-sucedido
            current_url = self.driver.current_url
            if "dashboard" in current_url or "login" not in current_url:
                self.log_test("Login Submit", "PASS", f"Login bem-sucedido. Redirecionado para: {current_url}")
            else:
                # Verificar se h√° mensagem de erro
                try:
                    error_message = self.driver.find_element(By.CSS_SELECTOR, "[class*='error'], [class*='alert']")
                    if error_message.is_displayed():
                        self.log_test("Login Submit", "FAIL", f"Login falhou com mensagem: {error_message.text}")
                    else:
                        self.log_test("Login Submit", "WARN", "Login pode ter falhado - sem feedback claro")
                except NoSuchElementException:
                    self.log_test("Login Submit", "WARN", "Login pode ter falhado - sem mensagem de erro vis√≠vel")
                    
        except Exception as e:
            self.log_test("Login Form", "FAIL", f"Erro no teste do formul√°rio: {str(e)}")
    
    def test_responsive_design(self):
        """Testa design responsivo"""
        print("\nüì± Testando design responsivo...")
        
        viewports = [
            (1920, 1080, "Desktop"),
            (1024, 768, "Tablet"),
            (375, 667, "Mobile"),
            (414, 896, "Mobile Large")
        ]
        
        for width, height, device in viewports:
            try:
                self.driver.set_window_size(width, height)
                time.sleep(1)
                
                # Verificar se elementos principais s√£o vis√≠veis
                body = self.driver.find_element(By.TAG_NAME, "body")
                if body.is_displayed():
                    self.log_test(f"Responsive - {device}", "PASS", f"Layout funcional em {width}x{height}")
                else:
                    self.log_test(f"Responsive - {device}", "FAIL", f"Layout quebrado em {width}x{height}")
                    
            except Exception as e:
                self.log_test(f"Responsive - {device}", "FAIL", f"Erro ao testar {device}: {str(e)}")
    
    def test_performance(self):
        """Testa performance da p√°gina"""
        print("\n‚ö° Testando performance...")
        
        try:
            # Medir tempo de carregamento
            start_time = time.time()
            self.driver.get(self.base_url)
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            load_time = time.time() - start_time
            
            if load_time < 3:
                self.log_test("Page Load Time", "PASS", f"Carregamento r√°pido: {load_time:.2f}s")
            elif load_time < 5:
                self.log_test("Page Load Time", "WARN", f"Carregamento moderado: {load_time:.2f}s")
            else:
                self.log_test("Page Load Time", "FAIL", f"Carregamento lento: {load_time:.2f}s")
            
            # Verificar recursos carregados
            resources = self.driver.execute_script("""
                return performance.getEntriesByType('resource').length;
            """)
            
            if resources < 20:
                self.log_test("Resource Count", "PASS", f"Poucos recursos: {resources}")
            elif resources < 50:
                self.log_test("Resource Count", "WARN", f"Recursos moderados: {resources}")
            else:
                self.log_test("Resource Count", "WARN", f"Muitos recursos: {resources}")
                
        except Exception as e:
            self.log_test("Performance", "FAIL", f"Erro no teste de performance: {str(e)}")
    
    def test_accessibility(self):
        """Testa acessibilidade b√°sica"""
        print("\n‚ôø Testando acessibilidade...")
        
        try:
            # Verificar alt text em imagens
            images = self.driver.find_elements(By.TAG_NAME, "img")
            images_with_alt = 0
            
            for img in images:
                if img.get_attribute("alt"):
                    images_with_alt += 1
            
            if len(images) == 0:
                self.log_test("Image Alt Text", "PASS", "Nenhuma imagem encontrada")
            elif images_with_alt == len(images):
                self.log_test("Image Alt Text", "PASS", f"Todas as {len(images)} imagens t√™m alt text")
            else:
                self.log_test("Image Alt Text", "WARN", f"Apenas {images_with_alt}/{len(images)} imagens t√™m alt text")
            
            # Verificar contraste (b√°sico)
            try:
                # Verificar se h√° elementos com texto
                text_elements = self.driver.find_elements(By.CSS_SELECTOR, "h1, h2, h3, p, span, a")
                if len(text_elements) > 0:
                    self.log_test("Text Elements", "PASS", f"{len(text_elements)} elementos de texto encontrados")
                else:
                    self.log_test("Text Elements", "WARN", "Poucos elementos de texto encontrados")
            except:
                self.log_test("Text Elements", "WARN", "N√£o foi poss√≠vel verificar elementos de texto")
                
        except Exception as e:
            self.log_test("Accessibility", "FAIL", f"Erro no teste de acessibilidade: {str(e)}")
    
    def test_user_flows(self):
        """Testa fluxos principais do usu√°rio"""
        print("\nüîÑ Testando fluxos de usu√°rio...")
        
        try:
            # Fluxo: Home -> Login -> Dashboard
            self.driver.get(self.base_url)
            time.sleep(1)
            
            # Ir para login
            login_link = self.driver.find_element(By.LINK_TEXT, "Entrar")
            login_link.click()
            time.sleep(2)
            
            # Fazer login
            email_field = self.driver.find_element(By.CSS_SELECTOR, "input[type='email']")
            password_field = self.driver.find_element(By.CSS_SELECTOR, "input[type='password']")
            
            email_field.clear()
            email_field.send_keys("admin@concursoai.com")
            password_field.clear()
            password_field.send_keys("admin123")
            
            submit_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            submit_button.click()
            time.sleep(3)
            
            # Verificar se chegou ao dashboard
            current_url = self.driver.current_url
            if "dashboard" in current_url:
                self.log_test("User Flow - Login to Dashboard", "PASS", "Fluxo de login bem-sucedido")
            else:
                self.log_test("User Flow - Login to Dashboard", "WARN", f"Fluxo pode ter falhado. URL: {current_url}")
            
            # Testar navega√ß√£o no dashboard
            try:
                dashboard_elements = self.driver.find_elements(By.CSS_SELECTOR, "nav a, .nav-link")
                if len(dashboard_elements) > 0:
                    self.log_test("Dashboard Navigation", "PASS", f"{len(dashboard_elements)} links de navega√ß√£o encontrados")
                else:
                    self.log_test("Dashboard Navigation", "WARN", "Poucos links de navega√ß√£o no dashboard")
            except:
                self.log_test("Dashboard Navigation", "WARN", "N√£o foi poss√≠vel verificar navega√ß√£o do dashboard")
                
        except Exception as e:
            self.log_test("User Flows", "FAIL", f"Erro no teste de fluxos: {str(e)}")
    
    def generate_report(self):
        """Gera relat√≥rio detalhado dos testes"""
        print("\nüìä Gerando relat√≥rio...")
        
        # Salvar relat√≥rio JSON
        report_file = f"ux_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        
        # Gerar relat√≥rio HTML
        html_report = self.generate_html_report()
        html_file = f"ux_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(html_report)
        
        print(f"‚úÖ Relat√≥rio JSON salvo: {report_file}")
        print(f"‚úÖ Relat√≥rio HTML salvo: {html_file}")
        
        # Resumo no console
        summary = self.results['summary']
        print(f"\nüìà RESUMO DOS TESTES:")
        print(f"   Total: {summary['total_tests']}")
        print(f"   ‚úÖ Passou: {summary['passed']}")
        print(f"   ‚ùå Falhou: {summary['failed']}")
        print(f"   ‚ö†Ô∏è Avisos: {summary['warnings']}")
        
        success_rate = (summary['passed'] / summary['total_tests']) * 100 if summary['total_tests'] > 0 else 0
        print(f"   üìä Taxa de sucesso: {success_rate:.1f}%")
    
    def generate_html_report(self):
        """Gera relat√≥rio HTML"""
        summary = self.results['summary']
        success_rate = (summary['passed'] / summary['total_tests']) * 100 if summary['total_tests'] > 0 else 0
        
        html = f"""
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Relat√≥rio de Testes UX - Concurso AI</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        .header {{ text-align: center; margin-bottom: 30px; }}
        .summary {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }}
        .summary-card {{ background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; }}
        .summary-card h3 {{ margin: 0 0 10px 0; color: #333; }}
        .summary-card .number {{ font-size: 2em; font-weight: bold; }}
        .pass {{ color: #28a745; }}
        .fail {{ color: #dc3545; }}
        .warn {{ color: #ffc107; }}
        .test-results {{ margin-top: 30px; }}
        .test-item {{ margin-bottom: 15px; padding: 15px; border-radius: 5px; border-left: 4px solid; }}
        .test-item.pass {{ background: #d4edda; border-color: #28a745; }}
        .test-item.fail {{ background: #f8d7da; border-color: #dc3545; }}
        .test-item.warn {{ background: #fff3cd; border-color: #ffc107; }}
        .test-name {{ font-weight: bold; margin-bottom: 5px; }}
        .test-message {{ color: #666; }}
        .timestamp {{ color: #999; font-size: 0.9em; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üß™ Relat√≥rio de Testes UX</h1>
            <h2>Concurso AI - {self.base_url}</h2>
            <p class="timestamp">Gerado em: {self.results['timestamp']}</p>
        </div>
        
        <div class="summary">
            <div class="summary-card">
                <h3>Total de Testes</h3>
                <div class="number">{summary['total_tests']}</div>
            </div>
            <div class="summary-card">
                <h3>‚úÖ Passou</h3>
                <div class="number pass">{summary['passed']}</div>
            </div>
            <div class="summary-card">
                <h3>‚ùå Falhou</h3>
                <div class="number fail">{summary['failed']}</div>
            </div>
            <div class="summary-card">
                <h3>‚ö†Ô∏è Avisos</h3>
                <div class="number warn">{summary['warnings']}</div>
            </div>
            <div class="summary-card">
                <h3>üìä Taxa de Sucesso</h3>
                <div class="number pass">{success_rate:.1f}%</div>
            </div>
        </div>
        
        <div class="test-results">
            <h3>Detalhes dos Testes</h3>
"""
        
        for test in self.results['tests']:
            status_class = test['status'].lower()
            html += f"""
            <div class="test-item {status_class}">
                <div class="test-name">{test['name']}</div>
                <div class="test-message">{test['message']}</div>
                <div class="timestamp">{test['timestamp']}</div>
            </div>
"""
        
        html += """
        </div>
    </div>
</body>
</html>
"""
        return html
    
    def run_all_tests(self):
        """Executa todos os testes"""
        print("üöÄ Iniciando Teste Rigoroso de UX - Concurso AI")
        print("=" * 60)
        
        if not self.setup_driver():
            print("‚ùå Falha ao configurar driver. Abortando testes.")
            return
        
        try:
            # Executar todos os testes
            self.test_page_load()
            self.test_navigation()
            self.test_login_form()
            self.test_responsive_design()
            self.test_performance()
            self.test_accessibility()
            self.test_user_flows()
            
        finally:
            if self.driver:
                self.driver.quit()
                print("\nüîö Driver finalizado")
        
        # Gerar relat√≥rio
        self.generate_report()
        print("\nüéâ Testes conclu√≠dos!")

def main():
    """Fun√ß√£o principal"""
    print("üß™ Teste Rigoroso de UX - Concurso AI")
    print("URL: https://concurso-ai-orchestrated.vercel.app/")
    print("=" * 60)
    
    # Verificar se Selenium est√° instalado
    try:
        from selenium import webdriver
    except ImportError:
        print("‚ùå Selenium n√£o est√° instalado!")
        print("üì¶ Instale com: pip install selenium")
        return
    
    # Executar testes
    test_suite = UXTestSuite()
    test_suite.run_all_tests()

if __name__ == "__main__":
    main()

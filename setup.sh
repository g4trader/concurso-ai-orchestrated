#!/bin/bash

# Script para configurar o ambiente de desenvolvimento

set -e

echo "ðŸš€ Configurando ambiente de desenvolvimento do Concurso AI..."

# Cores para output
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# Verificar se Docker estÃ¡ instalado
if ! command -v docker &> /dev/null; then
    error "Docker nÃ£o estÃ¡ instalado. Por favor, instale o Docker primeiro."
fi

if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose nÃ£o estÃ¡ instalado. Por favor, instale o Docker Compose primeiro."
fi

# Verificar se Python estÃ¡ instalado (para desenvolvimento local)
if ! command -v python3 &> /dev/null; then
    warn "Python 3 nÃ£o estÃ¡ instalado. SerÃ¡ necessÃ¡rio para desenvolvimento local."
fi

log "Configurando backend..."

# Criar arquivo .env se nÃ£o existir
if [ ! -f backend/.env ]; then
    log "Criando arquivo .env para o backend..."
    cp backend/env.example backend/.env
    warn "Arquivo .env criado. Por favor, configure as variÃ¡veis de ambiente."
fi

# Instalar dependÃªncias do backend (se Python estiver disponÃ­vel)
if command -v python3 &> /dev/null; then
    log "Instalando dependÃªncias do backend..."
    cd backend
    python3 -m venv venv
    source venv/bin/activate
    pip install -r requirements.txt
    cd ..
    log "DependÃªncias do backend instaladas."
else
    warn "Python nÃ£o encontrado. DependÃªncias do backend serÃ£o instaladas via Docker."
fi

log "Configurando frontend..."

# Verificar se Node.js estÃ¡ instalado
if ! command -v node &> /dev/null; then
    warn "Node.js nÃ£o estÃ¡ instalado. SerÃ¡ necessÃ¡rio para desenvolvimento local do frontend."
else
    log "Instalando dependÃªncias do frontend..."
    cd frontend
    npm install
    cd ..
    log "DependÃªncias do frontend instaladas."
fi

log "Iniciando serviÃ§os com Docker Compose..."

# Iniciar serviÃ§os
docker-compose up -d db

log "Aguardando banco de dados ficar pronto..."
sleep 10

# Inicializar banco de dados
if command -v python3 &> /dev/null; then
    log "Inicializando banco de dados..."
    cd backend
    source venv/bin/activate
    python init_db.py
    cd ..
    log "Banco de dados inicializado."
else
    warn "Python nÃ£o encontrado. Execute 'python init_db.py' no diretÃ³rio backend para inicializar o banco."
fi

log "âœ… Ambiente configurado com sucesso!"
echo ""
echo "ðŸ“‹ PrÃ³ximos passos:"
echo "1. Configure as variÃ¡veis de ambiente em backend/.env"
echo "2. Execute 'docker-compose up' para iniciar todos os serviÃ§os"
echo "3. Acesse:"
echo "   - Frontend: http://localhost:3000"
echo "   - Backend API: http://localhost:8000"
echo "   - API Docs: http://localhost:8000/docs"
echo ""
echo "ðŸ”§ Para desenvolvimento local:"
echo "1. Backend: cd backend && source venv/bin/activate && python run.py"
echo "2. Frontend: cd frontend && npm run dev"
echo ""
echo "ðŸŽ‰ Pronto para desenvolver!"

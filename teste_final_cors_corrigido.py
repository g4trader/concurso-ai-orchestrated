#!/usr/bin/env python3
"""
Teste final para verificar se todos os problemas foram corrigidos
"""

import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager

def test_sistema_completo():
    """Teste completo do sistema ap√≥s corre√ß√µes"""
    print("üîß Configurando driver para teste final...")
    
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.implicitly_wait(5)
    
    try:
        print("üß™ Testando sistema completo...")
        
        # 1. Testar p√°gina inicial
        print("1Ô∏è‚É£ Testando p√°gina inicial...")
        driver.get("http://localhost:3001")
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        print("‚úÖ P√°gina inicial carregada")
        
        # 2. Testar login
        print("2Ô∏è‚É£ Testando login...")
        driver.get("http://localhost:3001/login")
        
        email_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "email"))
        )
        email_input.clear()
        email_input.send_keys("admin@admin.com")
        
        password_input = driver.find_element(By.ID, "password")
        password_input.clear()
        password_input.send_keys("admin123")
        
        login_button = driver.find_element(By.XPATH, "//button[contains(text(), 'Entrar')]")
        login_button.click()
        
        time.sleep(3)
        current_url = driver.current_url
        if "dashboard" in current_url:
            print("‚úÖ Login bem-sucedido!")
        else:
            print(f"‚ùå Login falhou. URL atual: {current_url}")
            return False
        
        # 3. Testar p√°gina de an√°lise de editais
        print("3Ô∏è‚É£ Testando p√°gina de an√°lise de editais...")
        driver.get("http://localhost:3001/analise-editais")
        
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        
        # Verificar se o √≠cone Search est√° presente
        search_icons = driver.find_elements(By.CSS_SELECTOR, "svg.lucide-search")
        if search_icons:
            print("‚úÖ √çcone Search encontrado - erro corrigido!")
        else:
            print("‚ùå √çcone Search n√£o encontrado")
        
        # Verificar se os bot√µes est√£o presentes
        buttons = driver.find_elements(By.TAG_NAME, "button")
        button_texts = [btn.text for btn in buttons if btn.text]
        print(f"‚úÖ Bot√µes encontrados: {button_texts}")
        
        # 4. Testar p√°gina de sele√ß√£o de concursos
        print("4Ô∏è‚É£ Testando p√°gina de sele√ß√£o de concursos...")
        driver.get("http://localhost:3001/selecionar-concurso")
        
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        
        # Verificar se h√° concursos carregados
        time.sleep(2)
        concurso_cards = driver.find_elements(By.CSS_SELECTOR, "[class*='concurso']")
        if concurso_cards:
            print(f"‚úÖ {len(concurso_cards)} concursos encontrados")
        else:
            print("‚ùå Nenhum concurso encontrado")
        
        # 5. Testar an√°lise de edital
        print("5Ô∏è‚É£ Testando an√°lise de edital...")
        driver.get("http://localhost:3001/analise-editais")
        
        # Clicar em "Carregar Exemplo"
        exemplo_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Carregar Exemplo')]"))
        )
        exemplo_button.click()
        
        time.sleep(2)
        
        # Clicar em "Analisar Edital"
        analisar_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Analisar Edital')]"))
        )
        analisar_button.click()
        
        # Aguardar resultado
        time.sleep(5)
        
        # Verificar se h√° resultado
        resultado_elements = driver.find_elements(By.CSS_SELECTOR, "[class*='resultado'], [class*='analysis']")
        if resultado_elements:
            print("‚úÖ An√°lise de edital funcionando!")
        else:
            print("‚ùå An√°lise de edital falhou")
        
        print("\nüéâ TESTE COMPLETO FINALIZADO!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False
    
    finally:
        driver.quit()
        print("üîí Driver fechado")

if __name__ == "__main__":
    print("üöÄ TESTE FINAL - SISTEMA COMPLETO")
    print("=" * 50)
    
    result = test_sistema_completo()
    
    print("\n" + "=" * 50)
    if result:
        print("üéâ SISTEMA 100% FUNCIONAL!")
        print("‚úÖ Todos os problemas foram corrigidos:")
        print("   - CORS configurado corretamente")
        print("   - Login funcionando")
        print("   - P√°gina de an√°lise de editais funcionando")
        print("   - √çcone Search corrigido")
        print("   - Backend de editais funcionando")
        print("   - An√°lise de editais funcionando")
        print("\nüöÄ Sistema pronto para uso!")
    else:
        print("‚ùå Ainda h√° problemas no sistema")
        print("üîß Verifique os logs acima para detalhes")
